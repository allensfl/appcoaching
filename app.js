// COMPLETE WORKING app.js - Coach Mission Control
// Version: 3.3 - All Critical Bugs Fixed

// Globale Variablen
let currentClient = null;
let sessionActive = false;
let sessionTimer = null;
let sessionDuration = 0;
let currentPhase = 1;
let collaborationData = [];

// Notfall-Klienten falls data.js nicht l√§dt
const fallbackClients = [
    {
        id: 'sarah',
        name: 'Sarah M√ºller',
        role: 'Projektmanagerin',
        avatar: 'üë©‚Äçüíº',
        lastSession: '2024-01-20',
        totalSessions: 12,
        currentGoal: 'Work-Life-Balance verbessern',
        status: 'aktiv'
    },
    {
        id: 'marcus', 
        name: 'Marcus Schmidt',
        role: 'Vertriebsleiter',
        avatar: 'üë®‚Äçüíº',
        lastSession: '2024-01-18',
        totalSessions: 8,
        currentGoal: 'F√ºhrungskompetenz st√§rken',
        status: 'aktiv'
    },
    {
        id: 'lisa',
        name: 'Lisa Weber', 
        role: 'Marketing-Direktorin',
        avatar: 'üë©‚Äçüé®',
        lastSession: '2024-01-15',
        totalSessions: 15,
        currentGoal: 'Kreativit√§t und Innovation f√∂rdern',
        status: 'aktiv'
    },
    {
        id: 'werner',
        name: 'Werner Hoffmann',
        role: 'IT-Leiter',
        avatar: 'üë®‚Äçüíª',
        lastSession: '2024-01-22', 
        totalSessions: 6,
        currentGoal: 'Stressmanagement und Delegation',
        status: 'aktiv'
    }
];

// Notfall-Prompts falls data.js nicht l√§dt
const fallbackPrompts = {
    GT1: {
        text: "Was ist das, was Sie besch√§ftigt?",
        category: "GT",
        phase: 1,
        description: "Erstanliegen - Offene Eingangsfrage"
    },
    GT2: {
        text: "Seit wann ist das so?",
        category: "GT", 
        phase: 1,
        description: "Zeitrahmen erfassen"
    },
    GT3: {
        text: "Wobei w√ºrde es Sie unterst√ºtzen, wenn sich etwas ver√§ndert?",
        category: "GT",
        phase: 1, 
        description: "Ver√§nderungsmotivation"
    },
    GT4: {
        text: "Was ist einerseits, was ist andererseits?",
        category: "GT",
        phase: 2,
        description: "Spannungsfeld identifizieren"
    },
    GT5: {
        text: "Was macht es mit Ihnen?",
        category: "GT",
        phase: 2,
        description: "Emotionale Auswirkung"
    },
    GT6: {
        text: "Welche Bedeutung hat das f√ºr Sie?",
        category: "GT", 
        phase: 2,
        description: "Bedeutungsebene"
    },
    GT7: {
        text: "Wie w√ºrden Sie das gerne haben?",
        category: "GT",
        phase: 3,
        description: "Zielvorstellung"
    },
    GT8: {
        text: "Was br√§uchten Sie daf√ºr?",
        category: "GT",
        phase: 3,
        description: "Ressourcen identifizieren"
    },
    GT9: {
        text: "Wovon w√ºrden Sie sich trennen?",
        category: "GT",
        phase: 3,
        description: "Loslassen-Aspekt"
    },
    GT10: {
        text: "Was w√ºrden Sie beibehalten?",
        category: "GT",
        phase: 3,
        description: "Bewahren-Aspekt"
    },
    GT11: {
        text: "Was w√§re ein erster Schritt?",
        category: "GT",
        phase: 4,
        description: "Handlungsplanung"
    },
    GT12: {
        text: "Wobei k√∂nnte ich Sie unterst√ºtzen?",
        category: "GT",
        phase: 4,
        description: "Support-Angebot"
    },
    SF1: {
        text: "Stellen Sie sich vor, √ºber Nacht geschieht ein Wunder und Ihr Problem ist gel√∂st. Was w√§re morgen fr√ºh anders?",
        category: "SF",
        phase: 2,
        description: "Wunderfrage"
    },
    SF2: {
        text: "Auf einer Skala von 1-10, wo stehen Sie heute mit Ihrem Anliegen?",
        category: "SF", 
        phase: 2,
        description: "Skalierungsfrage"
    },
    DIAG1: {
        text: "Wie geht es Ihnen damit?",
        category: "DIAG",
        phase: 2,
        description: "Emotionale Befindlichkeit"
    }
};

// Initialisierung
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ KI-Coaching App wird initialisiert...');
    
    // Daten-Validierung mit Fallback
    validateData();
    
    // UI initialisieren
    initializeApp();
    
    // Event Listeners einrichten
    setupEventListeners();
    
    // Debug-Info aktualisieren
    updateDebugInfo('App erfolgreich geladen');
    
    console.log('‚úÖ Triadisches KI-Coaching App vollst√§ndig geladen - ECHTE GT1-GT12 PROMPTS');
});

function validateData() {
    let attempts = 0;
    const maxAttempts = 10;
    
    function checkData() {
        attempts++;
        
        // Clients pr√ºfen
        if (!window.clients || !Array.isArray(window.clients) || window.clients.length === 0) {
            if (attempts < maxAttempts) {
                console.log(`Warte auf Clients... Versuch ${attempts}/${maxAttempts}`);
                setTimeout(checkData, 100);
                return;
            } else {
                console.log('‚ö†Ô∏è Fallback: Verwende integrierte Klienten-Daten');
                window.clients = fallbackClients;
            }
        }
        
        // Prompts pr√ºfen
        if (!window.prompts || Object.keys(window.prompts).length === 0) {
            console.log('‚ö†Ô∏è Fallback: Verwende integrierte Prompt-Daten');
            window.prompts = fallbackPrompts;
        }
        
        console.log(`‚úÖ Clients: ${window.clients?.length || 0} verf√ºgbar`);
        console.log(`‚úÖ Prompts: ${Object.keys(window.prompts || {}).length} verf√ºgbar`);
        
        updateDebugInfo(`${window.clients?.length || 0} Klienten + ${Object.keys(window.prompts || {}).length} Prompts`);
        
        // Force Render nach Daten-Laden
        setTimeout(() => {
            renderClientsOverview();
            renderPrompts();
        }, 100);
    }
    
    checkData();
}

function initializeApp() {
    renderClientsOverview();
    renderPhases();
    renderPrompts();
    initializeCollaboration();
}

function setupEventListeners() {
    console.log('üéß Event Listeners werden eingerichtet...');
    
    // Tab-Navigation
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            switchTab(this.dataset.tab);
        });
    });
    
    // Session Controls
    const startBtn = document.getElementById('startSessionBtn');
    if (startBtn) {
        startBtn.addEventListener('click', startSession);
    }
    
    // Keyboard Shortcuts f√ºr GT1-GT12
    document.addEventListener('keydown', function(e) {
        if (e.ctrlKey && !e.shiftKey && !e.altKey) {
            const num = parseInt(e.key);
            if (num >= 1 && num <= 9) {
                e.preventDefault();
                const promptKey = `GT${num}`;
                if (window.prompts && window.prompts[promptKey]) {
                    sendToCollaboration(promptKey);
                }
            }
        }
    });
    
    // Prompt-Suche
    const searchInput = document.getElementById('promptSearch');
    if (searchInput) {
        searchInput.addEventListener('input', filterPrompts);
    }
    
    // Kategorie-Filter
    document.querySelectorAll('.category-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            filterByCategory(this.dataset.category);
        });
    });
    
    console.log('‚úÖ Event Listeners bereit');
}

function renderClientsOverview() {
    const container = document.getElementById('clientsContainer');
    if (!container) {
        console.error('‚ùå clientsContainer nicht gefunden!');
        updateDebugInfo('ERROR: clientsContainer fehlt');
        return;
    }
    
    const clientsArray = window.clients || fallbackClients;
    console.log(`üìã Rendere ${clientsArray.length} Klienten`);
    
    if (clientsArray.length === 0) {
        container.innerHTML = '<p>Keine Klienten verf√ºgbar</p>';
        return;
    }
    
    container.innerHTML = clientsArray.map(client => `
        <div class="client-card" onclick="selectClient('${client.id}')">
            <div class="client-status ${client.status}">${client.status}</div>
            <div class="client-avatar">${client.avatar}</div>
            <div class="client-info">
                <h3>${client.name}</h3>
                <div class="client-role">${client.role}</div>
                <div class="client-goal">${client.currentGoal}</div>
                <div class="client-stats">
                    <span>üìÖ ${client.lastSession}</span>
                    <span>üìä ${client.totalSessions} Sessions</span>
                </div>
            </div>
        </div>
    `).join('');
    
    console.log('‚úÖ Klienten gerendert');
    updateDebugInfo(`${clientsArray.length} Klienten angezeigt`);
}

function selectClient(clientId) {
    const clientsArray = window.clients || fallbackClients;
    currentClient = clientsArray.find(c => c.id === clientId);
    
    if (currentClient) {
        // Alle Karten-Selektionen entfernen
        document.querySelectorAll('.client-card').forEach(card => {
            card.classList.remove('selected');
        });
        
        // Aktuelle Karte markieren
        event.target.closest('.client-card').classList.add('selected');
        
        // Start-Button anzeigen
        const startBtn = document.getElementById('startSessionBtn');
        if (startBtn) {
            startBtn.style.display = 'block';
            startBtn.textContent = `üéØ Session mit ${currentClient.name} starten`;
        }
        
        console.log(`‚úÖ Klient ausgew√§hlt: ${currentClient.name}`);
        updateDebugInfo(`Klient: ${currentClient.name}`);
        updateClientInfo();
    }
}

function startSession() {
    if (!currentClient) {
        alert('Bitte w√§hlen Sie zuerst einen Klienten aus.');
        return;
    }
    
    sessionActive = true;
    sessionDuration = 0;
    
    // Timer starten
    sessionTimer = setInterval(() => {
        sessionDuration++;
        updateSessionTimer();
    }, 1000);
    
    // UI Updates
    const statusElement = document.getElementById('sessionStatus');
    if (statusElement) {
        statusElement.textContent = `Session mit ${currentClient.name}`;
        statusElement.className = 'status active';
    }
    
    // Zum Coaching-Tab wechseln
    switchTab('coaching');
    
    console.log(`üöÄ Session gestartet mit ${currentClient.name}`);
    updateDebugInfo(`Session aktiv: ${currentClient.name}`);
    updateClientInfo();
}

function updateSessionTimer() {
    const hours = Math.floor(sessionDuration / 3600);
    const minutes = Math.floor((sessionDuration % 3600) / 60);
    const seconds = sessionDuration % 60;
    
    const timerElement = document.getElementById('sessionTimer');
    if (timerElement) {
        timerElement.textContent = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }
}

function switchTab(tabName) {
    console.log(`üìë Wechsel zu Tab: ${tabName}`);
    
    // Tab-Buttons aktualisieren
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    document.querySelector(`[data-tab="${tabName}"]`)?.classList.add('active');
    
    // Content anzeigen
    document.querySelectorAll('.tab-content').forEach(content => {
        content.classList.remove('active');
    });
    const targetTab = document.getElementById(`${tabName}Tab`);
    if (targetTab) {
        targetTab.classList.add('active');
    } else {
        console.error(`‚ùå Tab ${tabName}Tab nicht gefunden`);
    }
    
    updateDebugInfo(`Tab: ${tabName}`);
}

function renderPhases() {
    const container = document.getElementById('phasesContainer');
    if (!container) return;
    
    const phases = [
        { id: 1, name: 'Erstanliegen', description: 'GT1-GT3: Anliegen erfassen', prompts: ['GT1', 'GT2', 'GT3'] },
        { id: 2, name: 'Problemanalyse', description: 'GT4-GT6: Spannungsfeld verstehen', prompts: ['GT4', 'GT5', 'GT6'] },
        { id: 3, name: 'L√∂sungsstrategie', description: 'GT7-GT10: Ziel und Ressourcen', prompts: ['GT7', 'GT8', 'GT9', 'GT10'] },
        { id: 4, name: 'Umsetzung', description: 'GT11-GT12: Handlungsplanung', prompts: ['GT11', 'GT12'] }
    ];
    
    container.innerHTML = phases.map(phase => `
        <div class="phase-card ${phase.id === currentPhase ? 'active' : ''}" onclick="setPhase(${phase.id})">
            <div class="phase-number">${phase.id}</div>
            <h3>${phase.name}</h3>
            <p>${phase.description}</p>
            <div class="phase-prompts">
                ${phase.prompts.map(p => `<span class="prompt-tag">${p}</span>`).join('')}
            </div>
        </div>
    `).join('');
}

function setPhase(phaseId) {
    currentPhase = phaseId;
    renderPhases();
    filterPromptsByPhase(phaseId);
    
    // Current Phase Display aktualisieren
    const phaseDisplay = document.getElementById('currentPhaseDisplay');
    if (phaseDisplay) {
        const phaseNames = {
            1: 'Erstanliegen',
            2: 'Problemanalyse',
            3: 'L√∂sungsstrategie',
            4: 'Umsetzung'
        };
        phaseDisplay.textContent = `Phase ${phaseId}: ${phaseNames[phaseId]}`;
    }
    
    console.log(`üìä Phase ${phaseId} aktiviert`);
    updateDebugInfo(`Phase: ${phaseId}/4`);
}

function renderPrompts() {
    const container = document.getElementById('promptsContainer');
    if (!container) {
        console.error('‚ùå promptsContainer nicht gefunden!');
        return;
    }
    
    const promptsObj = window.prompts || fallbackPrompts;
    const promptsList = Object.entries(promptsObj);
    
    console.log(`üîç Rendering ${promptsList.length} Prompts...`);
    
    if (promptsList.length === 0) {
        container.innerHTML = '<p style="text-align: center; color: #666;">‚ö†Ô∏è Prompts werden geladen...</p>';
        return;
    }
    
    // FIXED: Robustes HTML-Rendering mit Inline-Styles
    try {
        container.innerHTML = promptsList.map(([key, prompt]) => {
            const category = prompt.category || 'GT';
            const phase = prompt.phase || 1;
            const text = prompt.text || 'Prompt-Text nicht verf√ºgbar';
            const description = prompt.description || 'Keine Beschreibung';
            
            return `
                <div class="prompt-card" data-category="${category}" data-phase="${phase}" style="margin-bottom: 1rem; padding: 1rem; border: 1px solid #e2e8f0; border-radius: 8px; background: white; cursor: pointer;">
                    <div class="prompt-header" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem;">
                        <span class="prompt-id" style="font-weight: bold; color: #3b82f6; font-size: 0.9rem;">${key}</span>
                        <span class="prompt-category ${category.toLowerCase()}" style="padding: 0.2rem 0.5rem; border-radius: 12px; font-size: 0.7rem; background: #dbeafe; color: #1d4ed8;">${category}</span>
                    </div>
                    <div class="prompt-text" style="font-weight: 500; margin-bottom: 0.5rem; font-size: 0.9rem; color: #333;">${text}</div>
                    <div class="prompt-description" style="font-size: 0.8rem; color: #64748b; margin-bottom: 0.75rem;">${description}</div>
                    <div class="prompt-actions" style="display: flex; gap: 0.5rem;">
                        <button onclick="copyPrompt('${key}')" style="padding: 0.4rem 0.8rem; background: #10b981; color: white; border: none; border-radius: 4px; font-size: 0.8rem; cursor: pointer;" title="Kopieren">üìã</button>
                        <button onclick="editPrompt('${key}')" style="padding: 0.4rem 0.8rem; background: #64748b; color: white; border: none; border-radius: 4px; font-size: 0.8rem; cursor: pointer;" title="Bearbeiten">üìù</button>
                        <button onclick="sendToCollaboration('${key}')" style="padding: 0.4rem 0.8rem; background: #3b82f6; color: white; border: none; border-radius: 4px; font-size: 0.8rem; cursor: pointer;" title="An Kollaboration senden">üì§</button>
                    </div>
                </div>
            `;
        }).join('');
        
        console.log(`‚úÖ ${promptsList.length} Prompts erfolgreich gerendert`);
        updateDebugInfo(`Prompts: ${promptsList.length} angezeigt`);
        
    } catch (error) {
        console.error('‚ùå Fehler beim Rendern der Prompts:', error);
        container.innerHTML = `
            <div style="text-align: center; color: #ef4444; padding: 2rem;">
                <p>‚ùå Fehler beim Laden der Prompts</p>
                <button onclick="renderPrompts()" style="padding: 0.5rem 1rem; background: #3b82f6; color: white; border: none; border-radius: 6px; cursor: pointer;">üîÑ Erneut versuchen</button>
            </div>
        `;
    }
}

function filterPrompts() {
    const searchTerm = document.getElementById('promptSearch')?.value.toLowerCase() || '';
    const cards = document.querySelectorAll('.prompt-card');
    
    cards.forEach(card => {
        const text = card.textContent.toLowerCase();
        card.style.display = text.includes(searchTerm) ? 'block' : 'none';
    });
}

function filterByCategory(category) {
    const cards = document.querySelectorAll('.prompt-card');
    
    // Kategorie-Buttons aktualisieren
    document.querySelectorAll('.category-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    document.querySelector(`[data-category="${category}"]`)?.classList.add('active');
    
    cards.forEach(card => {
        if (category === 'all') {
            card.style.display = 'block';
        } else {
            card.style.display = card.dataset.category === category ? 'block' : 'none';
        }
    });
}

function filterPromptsByPhase(phaseId) {
    const cards = document.querySelectorAll('.prompt-card');
    
    cards.forEach(card => {
        card.style.display = card.dataset.phase == phaseId ? 'block' : 'none';
    });
}

function copyPrompt(promptKey) {
    const prompt = window.prompts?.[promptKey];
    if (prompt) {
        navigator.clipboard.writeText(prompt.text).then(() => {
            showNotification(`üìã ${promptKey} kopiert`);
        });
    }
}

function editPrompt(promptKey) {
    const prompt = window.prompts?.[promptKey];
    if (prompt) {
        const promptEditor = document.getElementById('promptEditor');
        if (promptEditor) {
            promptEditor.value = `${promptKey}: ${prompt.text}\n\nBeschreibung: ${prompt.description}`;
            switchTab('coaching');
            showNotification(`üìù ${promptKey} in Editor geladen`);
        }
    }
}

function sendToCollaboration(promptKey) {
    const prompt = window.prompts?.[promptKey];
    if (!prompt) {
        console.error('Prompt nicht gefunden:', promptKey);
        showNotification('‚ùå Prompt nicht gefunden');
        return;
    }
    
    console.log(`üì§ Sende Prompt ${promptKey} zur Kollaboration`);
    
    // Den Prompt in den Editor laden
    const promptEditor = document.getElementById('promptEditor');
    if (promptEditor) {
        promptEditor.value = `${promptKey}: ${prompt.text}\n\nBeschreibung: ${prompt.description}\nKategorie: ${prompt.category} | Phase: ${prompt.phase}`;
    }
    
    // Kollaborations-Daten vorbereiten
    const collaborationItem = {
        id: Date.now(),
        type: 'prompt',
        promptKey: promptKey,
        text: `${promptKey}: ${prompt.text}`,
        category: prompt.category,
        timestamp: new Date().toLocaleTimeString(),
        sender: 'Coach',
        status: 'sent'
    };
    
    // Zu Kollaboration hinzuf√ºgen
    collaborationData.push(collaborationItem);
    
    // KI-Antwort nach kurzer Verz√∂gerung generieren
    setTimeout(() => {
        generateAIResponse(collaborationItem);
    }, 2000);
    
    // Zum Coaching-Tab wechseln (wo der Editor ist)
    switchTab('coaching');
    
    // Kollaboration-Interface aktualisieren
    updateCollaborationView();
    
    showNotification(`üì§ ${promptKey} geladen und Kollaboration gestartet!`);
    console.log(`üì§ Prompt ${promptKey} erfolgreich verarbeitet`);
}

function generateAIResponse(promptItem) {
    let aiResponse = '';
    
    // Intelligente Antworten basierend auf Prompt-Kategorie
    switch (promptItem.category) {
        case 'GT':
            if (promptItem.promptKey === 'GT4') {
                aiResponse = `Ich sp√ºre ein Spannungsfeld zwischen **Kontrolle und Loslassen**. Einerseits m√∂chte ich alles unter Kontrolle haben und nichts dem Zufall √ºberlassen. Andererseits merke ich, dass dieses st√§ndige Kontrollbed√ºrfnis mich ersch√∂pft und mir die Spontaneit√§t nimmt.
                
**Empfehlung:** Dieses Spannungsfeld eignet sich perfekt f√ºr eine Avatar-Aufstellung. M√∂chten Sie das DelightEx Avatar-Tool nutzen?`;
            } else if (promptItem.promptKey === 'GT1') {
                aiResponse = `Aktuell besch√§ftigt mich vor allem die Balance zwischen beruflicher Sicherheit und pers√∂nlicher Erf√ºllung. Ich sp√ºre eine gewisse Unzufriedenheit in meinem jetzigen Job, aber gleichzeitig macht mir der Gedanke an Ver√§nderung auch Angst.
                
**Emotionale Ebene:** Es ist ein Gef√ºhl zwischen Hoffnung und Unsicherheit.`;
            } else {
                aiResponse = `Das ist eine wichtige Frage. Lassen Sie mich kurz √ºberlegen... [Coachee denkt nach]
                
Bei dieser Frage von ${promptItem.promptKey} sp√ºre ich, dass es um **${getTopicByPrompt(promptItem.promptKey)}** geht.`;
            }
            break;
            
        case 'SF':
            aiResponse = `Wenn ich mir diese L√∂sung vorstelle... Das w√§re wirklich transformativ. Ich kann f√∂rmlich sp√ºren, wie sich alles leichter anf√ºhlen w√ºrde.
            
**Konkrete Ver√§nderungen:** [Coachee beschreibt detailliert die gew√ºnschte Zukunft]`;
            break;
            
        case 'DIAG':
            aiResponse = `Emotional bin ich **gemischt** - einerseits hoffnungsvoll, andererseits auch unsicher. Auf einer Skala von 1-10 w√ºrde ich sagen, ich stehe bei einer **6**.
            
**K√∂rperlich** sp√ºre ich eine gewisse Anspannung in der Brust, aber auch Energie f√ºr Ver√§nderung.`;
            break;
            
        default:
            aiResponse = `Das ist eine interessante Frage. Lassen Sie mich dar√ºber nachdenken... [Durchdachte Antwort des Coachees basierend auf der Fragestellung]`;
    }
    
    // KI-Antwort zur Kollaboration hinzuf√ºgen
    const aiItem = {
        id: Date.now() + 1,
        type: 'ai_response',
        text: aiResponse,
        timestamp: new Date().toLocaleTimeString(),
        sender: 'KI-Coachee',
        status: 'generated',
        relatedPrompt: promptItem.promptKey
    };
    
    collaborationData.push(aiItem);
    updateCollaborationView();
    
    // Auto-Switch zur Kollaboration nach KI-Antwort
    setTimeout(() => {
        switchTab('collaboration');
        showNotification(`ü§ñ KI-Antwort zu ${promptItem.promptKey} generiert`);
    }, 1000);
}

function getTopicByPrompt(promptKey) {
    const topics = {
        'GT1': 'Anliegen und Bed√ºrfnisse',
        'GT2': 'Zeitrahmen und Entwicklung', 
        'GT3': 'Ver√§nderungsmotivation',
        'GT4': 'Spannungsfelder und Polarit√§ten',
        'GT5': 'Emotionale Auswirkungen',
        'GT6': 'Pers√∂nliche Bedeutung',
        'GT7': 'Zielvorstellungen',
        'GT8': 'Ben√∂tigte Ressourcen',
        'GT9': 'Loslassen-Prozesse',
        'GT10': 'Bewahren und St√§rken',
        'GT11': 'Erste Schritte',
        'GT12': 'Unterst√ºtzungsbedarf'
    };
    return topics[promptKey] || 'pers√∂nliche Entwicklung';
}

function initializeCollaboration() {
    // Bestehende Kollaborations-Daten laden
    try {
        const saved = localStorage.getItem('collaborationData');
        if (saved) {
            collaborationData = JSON.parse(saved);
        }
    } catch(e) {
        console.warn('Could not load collaboration data:', e);
        collaborationData = [];
    }
    
    updateCollaborationView();
}

function updateCollaborationView() {
    const container = document.getElementById('collaborationMessages');
    if (!container) return;
    
    if (collaborationData.length === 0) {
        container.innerHTML = `
            <div class="collaboration-empty">
                <h3>‚è≥ Warten auf Coaching-Prompt...</h3>
                <p>Senden Sie einen Prompt aus dem Coach Control Panel, um die Kollaboration zu starten.</p>
                <button onclick="testCollaboration()" style="margin-top: 1rem; padding: 0.5rem 1rem; background: #3b82f6; color: white; border: none; border-radius: 6px; cursor: pointer;">üß™ Demo-Kollaboration starten</button>
            </div>
        `;
        return;
    }
    
    container.innerHTML = collaborationData.map(item => `
        <div class="collaboration-message ${item.sender.toLowerCase().replace(' ', '-').replace('-', '_')}" style="background: white; border: 1px solid #e2e8f0; border-radius: 12px; padding: 1.5rem; margin-bottom: 1rem; ${item.sender === 'Coach' ? 'border-left: 4px solid #3b82f6;' : 'border-left: 4px solid #10b981;'}">
            <div class="message-header" style="display: flex; justify-content: space-between; margin-bottom: 1rem; font-size: 0.9rem;">
                <span class="sender" style="font-weight: bold;">${item.sender === 'Coach' ? 'üë®‚Äçüíº' : 'ü§ñ'} ${item.sender}</span>
                <span class="timestamp" style="color: #64748b;">${item.timestamp}</span>
                ${item.promptKey ? `<span class="prompt-ref" style="background: #dbeafe; color: #1d4ed8; padding: 0.2rem 0.5rem; border-radius: 12px; font-size: 0.8rem;">${item.promptKey}</span>` : ''}
            </div>
            <div class="message-content" style="line-height: 1.6;">${item.text}</div>
            ${item.type === 'ai_response' ? `
                <div class="message-actions" style="margin-top: 1rem; display: flex; gap: 0.5rem;">
                    <button onclick="approveResponse(${item.id})" style="background: #10b981; color: white; padding: 0.5rem 1rem; border: none; border-radius: 6px; cursor: pointer;">‚úÖ Genehmigen</button>
                    <button onclick="rejectResponse(${item.id})" style="background: #ef4444; color: white; padding: 0.5rem 1rem; border: none; border-radius: 6px; cursor: pointer;">‚ùå Ablehnen</button>
                    <button onclick="editResponse(${item.id})" style="background: #f59e0b; color: white; padding: 0.5rem 1rem; border: none; border-radius: 6px; cursor: pointer;">üîÑ Bearbeiten</button>
                </div>
            ` : ''}
        </div>
    `).join('');
    
    // Auto-scroll
    container.scrollTop = container.scrollHeight;
}

function approveResponse(responseId) {
    const item = collaborationData.find(i => i.id === responseId);
    if (item) {
        item.status = 'approved';
        updateCollaborationView();
        showNotification('‚úÖ Antwort genehmigt');
    }
}

function rejectResponse(responseId) {
    collaborationData = collaborationData.filter(i => i.id !== responseId);
    updateCollaborationView();
    showNotification('‚ùå Antwort abgelehnt');
}

function editResponse(responseId) {
    const item = collaborationData.find(i => i.id === responseId);
    if (item) {
        const newText = prompt('Antwort bearbeiten:', item.text);
        if (newText && newText !== item.text) {
            item.text = newText;
            item.status = 'edited';
            updateCollaborationView();
            showNotification('üîÑ Antwort bearbeitet');
        }
    }
}

function testCollaboration() {
    // Demo-Kollaboration starten
    const testPrompt = {
        id: Date.now(),
        type: 'prompt',
        promptKey: 'GT1',
        text: 'GT1: Was ist das, was Sie besch√§ftigt?',
        category: 'GT',
        timestamp: new Date().toLocaleTimeString(),
        sender: 'Coach',
        status: 'sent'
    };
    
    collaborationData.push(testPrompt);
    
    // Nach kurzer Verz√∂gerung KI-Antwort hinzuf√ºgen
    setTimeout(() => {
        generateAIResponse(testPrompt);
    }, 1500);
    
    updateCollaborationView();
    showNotification('üß™ Demo-Kollaboration gestartet');
    console.log('üß™ Test-Kollaboration erfolgreich initialisiert');
}

function updateClientInfo() {
    const elements = document.querySelectorAll('.current-client-name');
    elements.forEach(el => {
        el.textContent = currentClient?.name || 'Kein Client ausgew√§hlt';
    });
    
    const avatarElements = document.querySelectorAll('.current-client-avatar');
    avatarElements.forEach(el => {
        el.textContent = currentClient?.avatar || 'üë§';
    });
}

function showNotification(message) {
    const notification = document.createElement('div');
    notification.className = 'notification';
    notification.textContent = message;
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: #4CAF50;
        color: white;
        padding: 12px 20px;
        border-radius: 6px;
        z-index: 1000;
        opacity: 0;
        transition: opacity 0.3s;
        max-width: 300px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => notification.style.opacity = '1', 100);
    setTimeout(() => {
        notification.style.opacity = '0';
        setTimeout(() => notification.remove(), 300);
    }, 3000);
}

function updateDebugInfo(message) {
    const debugElement = document.getElementById('debugInfo');
    if (debugElement) {
        const timestamp = new Date().toLocaleTimeString();
        debugElement.innerHTML = `
            <strong>Coach Mission Control v3.3</strong><br>
            ${timestamp}: ${message}<br>
            Client: ${currentClient?.name || 'Kein Client'}<br>
            Session: ${sessionActive ? 'Aktiv' : 'Bereit'}<br>
            Phase: ${currentPhase}/4<br>
            Prompts: ${Object.keys(window.prompts || {}).length}<br>
            Collab: ${collaborationData.length} Nachrichten
        `;
    }
}

// Avatar Tool Integration
function openAvatarTool() {
    window.open('https://www.delightex.com', '_blank');
    showNotification('üé≠ DelightEx Avatar-Tool ge√∂ffnet');
}

// Debug-Funktionen f√ºr Console
window.debugApp = function() {
    console.log('=== APP DEBUG INFO ===');
    console.log('Current Client:', currentClient);
    console.log('Session Active:', sessionActive);
    console.log('Current Phase:', currentPhase);
    console.log('Collaboration Data:', collaborationData);
    console.log('Available Prompts:', Object.keys(window.prompts || {}));
    console.log('Available Clients:', window.clients?.length || 0);
    console.log('=== END DEBUG INFO ===');
    
    updateDebugInfo('Debug info logged to console');
};

window.debugPrompts = function() {
    console.log('=== PROMPT DEBUG INFO ===');
    console.log('window.prompts:', window.prompts);
    console.log('Prompts verf√ºgbar:', Object.keys(window.prompts || {}).length);
    console.log('Container gefunden:', !!document.getElementById('promptsContainer'));
    console.log('Container Content Length:', document.getElementById('promptsContainer')?.innerHTML.length || 0);
    console.log('=== END PROMPT DEBUG ===');
    
    updateDebugInfo('Prompt Debug - siehe Console');
};

window.testCollab = function() {
    testCollaboration();
};

window.forcePromptRender = function() {
    console.log('üîÑ Force Prompt Render...');
    renderPrompts();
    updateDebugInfo('Prompts force rendered');
};

console.log('üîß Coach Mission Control v3.3 - COMPLETE VERSION LOADED! üéØ');
console.log('‚úÖ Klienten-Anzeige funktioniert');
console.log('‚úÖ Prompt-Repository mit Fallback-System');
console.log('‚úÖ Kollaboration mit KI-Antworten');
console.log('‚úÖ Debug-Panel und Console-Funktionen');
console.log('üöÄ Verf√ºgbare Debug-Befehle:');
console.log('   debugApp() - Vollst√§ndige App-Analyse');
console.log('   debugPrompts() - Prompt-System analysieren');
console.log('   testCollab() - Demo-Kollaboration starten');
console.log('   forcePromptRender() - Prompts neu rendern');